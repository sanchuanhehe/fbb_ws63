#include "mconfig.h"
#include "memory_config.h"
#include "function.h"

#ifdef _PRE_FEATURE_VENEER_ROM
#include "function.lds"
#include "data.lds"
#include "rom_data.lds"
#else
#define VENEER_TEXT
#define VENEER_ROM_RAM_PLAT_B
#define VENEER_ROM_RAM_WIFI_B
#define VENEER_ROM_RAM_BTC_B
#define VENEER_ROM_RAM_BTH_B
#define VENEER_ROM_RAM_PLAT_D
#define VENEER_ROM_RAM_WIFI_D
#define VENEER_ROM_RAM_BTC_D
#define VENEER_ROM_RAM_BTH_D
#endif

#ifdef ROM_CHECK
#define ADD_ROM_VERIFY_OFFSET . += 0x30;
#else
#define ADD_ROM_VERIFY_OFFSET
#endif

#define CHECK_ALIGN_4(symbol_name) \
    ASSERT(((symbol_name % 4) == 0), "Error: symbol value is not 4-byte aligned.")

#define CHECK_ALIGN_8(symbol_name) \
    ASSERT(((symbol_name % 8) == 0), "Error: symbol value is not 8-byte aligned.")

OUTPUT_ARCH("riscv")
ENTRY(reset_vector)

/* FLASH sector size is 2K */
/* make this table consistent with the configuration given by the security core */
MEMORY
{
    ROM                  : ORIGIN = ROM_START,                      LENGTH = ROM_LENGTH
    SRAM                 : ORIGIN = APP_SRAM_ORIGIN,                LENGTH = (APP_SRAM_LENGTH - HILINK_SRAM_LENGTH)
    PRESERVE_SHARE_MEM   : ORIGIN = PRESERVED_REGION_ORIGIN,        LENGTH = PRESERVED_REGION_LENGTH
    PROGRAM_STARTUP      : ORIGIN = APP_PROGRAM_ORIGIN,             LENGTH = 0x400
    PROGRAM              : ORIGIN = APP_PROGRAM_ORIGIN + 0x400,     LENGTH = (APP_PROGRAM_LENGTH - HILINK_STARTUP_LENGTH)- 0x400
    HILINK_SRAM          : ORIGIN = HILINK_SRAM_ORIGIN,             LENGTH = HILINK_SRAM_LENGTH
    HILINK_PROGRAM       : ORIGIN = HILINK_PROGRAM_ORIGIN,          LENGTH = HILINK_PROGRAM_LENGTH
#ifdef CONFIG_MEMORY_CUSTOMIZE_RSV
    PROGRAM_MEM_RSV      : ORIGIN = APP_PROGRAM_MEM_RSV_ORIGIN,     LENGTH = 0x100
#endif
}

SECTIONS
{
    .text :
    {
        KEEP (*(.hilink_info))
    } > HILINK_PROGRAM
    . = ALIGN(0X20);
    .text :
    {
        KEEP (*(.hilink_tbl))
    } > HILINK_PROGRAM
    . = ALIGN(0X20);

    startup : ALIGN(8) {
        ADD_ROM_VERIFY_OFFSET
        KEEP (*(.text.entry))
        KEEP (*(.text.runtime.init))

        . = ALIGN(4);
        __zinitcall_run_start = .;
        KEEP(*(.zinitcall.run*.init))
        __zinitcall_run_end = .;
    } > HILINK_PROGRAM

#if defined(CONFIG_DRIVER_SUPPORT_LITEOS_208_5_0)
    /* liteos v208 kernel init */
    .sysintcall.init : {
        . = ALIGN(4);
        __sysinitcall_start = .;
        __sysinitcall0_start = .;
        KEEP(*(SORT(.sysinitcall_level0_*)))
        __sysinitcall1_start = .;
        KEEP(*(SORT(.sysinitcall_level1_*)))
        __sysinitcall2_start = .;
        KEEP(*(SORT(.sysinitcall_level2_*)))
        __sysinitcall3_start = .;
        KEEP(*(SORT(.sysinitcall_level3_*)))
        __sysinitcall4_start = .;
        KEEP(*(SORT(.sysinitcall_level4_*)))
        __sysinitcall5_start = .;
        KEEP(*(SORT(.sysinitcall_level5_*)))
        __sysinitcall6_start = .;
        KEEP(*(SORT(.sysinitcall_level6_*)))
        __sysinitcall7_start = .;
        KEEP(*(SORT(.sysinitcall_level7_*)))
        __sysinitcall_end = .;
    } > HILINK_PROGRAM

    /* liteos compat linux initcall sections */
    .initcall.init : {
        __initcall0_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall0.init)))
        __initcall0_end = ABSOLUTE(.);

        __initcall1_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall1.init)))
        __initcall1_end = ABSOLUTE(.);

        __initcall2_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall2.init)))
        __initcall2_end = ABSOLUTE(.);

        __initcall3_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall3.init)))
        __initcall3_end = ABSOLUTE(.);

        __initcall4_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall4.init)))
        __initcall4_end = ABSOLUTE(.);

        __initcall5_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall5.init)))
        __initcall5_end = ABSOLUTE(.);

        __initcall6_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall6.init)))
        __initcall6_end = ABSOLUTE(.);

        __initcall7_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall7.init)))
        __initcall7_end = ABSOLUTE(.);
    } > HILINK_PROGRAM
#else
    /* liteos compat linux initcall sections */
    .initcall.init : ALIGN(8) {
        __initcall0_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall0.init)))
        __initcall0_end = ABSOLUTE(.);

        __initcall1_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall1.init)))
        __initcall1_end = ABSOLUTE(.);

        __initcall2_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall2.init)))
        __initcall2_end = ABSOLUTE(.);

        __initcall3_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall3.init)))
        __initcall3_end = ABSOLUTE(.);

        __initcall4_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall4.init)))
        __initcall4_end = ABSOLUTE(.);

        __initcall5_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall5.init)))
        __initcall5_end = ABSOLUTE(.);

        __initcall6_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall6.init)))
        __initcall6_end = ABSOLUTE(.);

        __initcall7_start = ABSOLUTE(.);
        KEEP(*(SORT (.initcall7.init)))
        __initcall7_end = ABSOLUTE(.);
    } > HILINK_PROGRAM
#endif
}

/* rom code */
SECTIONS {
    .plat_romtext : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        PLAT_ROM_KEEP(.text* .rodata*)
        PLAT_ROM_NO_KEEP(.text* .rodata*)
    } > ROM

    .wifi_romtext : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        WIFI_ROM_KEEP(.text* .rodata*)
        WIFI_ROM_NO_KEEP(.text* .rodata*)
    } > ROM

    .btc_romtext : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        BTC_ROM_KEEP(.text* .rodata*)
        BTC_ROM_NO_KEEP(.text* .rodata*)
    } > ROM

    .bth_romtext : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        BTH_ROM_KEEP(.text* .rodata*)
        BTH_ROM_NO_KEEP(.text* .rodata*)
    } > ROM
}

/* PKT RAM */
SECTIONS
{
    /* pkt ram reserve section */
    .wifi_pkt_ram (NOLOAD) : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        __wifi_pkt_ram_begin__ = .;
        . += (48 * 1024 - 36 * 1024);
        __wifi_pkt_ram_end__ = .;
        __stack_top__ = __wifi_pkt_ram_end__;
    } > HILINK_SRAM
}

/* sram */
SECTIONS
{
    /* sram text */
    .plat_text_sram : ALIGN(8) {
        FILL(0xFF)
        ADD_ROM_VERIFY_OFFSET
        . = ALIGN(8);
        __sram_text_load__ = LOADADDR(.plat_text_sram);
        __sram_text_begin__ = .;
        LITEOS_TASK_RAM_TEXT()
        PLAT_SRAM_NONROM(*.text* *.rodata*)
        CHECK_ALIGN_4(__sram_text_load__);
        CHECK_ALIGN_4(__sram_text_begin__);
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .wifi_text_sram : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        WIFI_SRAM_NONROM(.text* .rodata*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .btc_text_sram : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        BTC_SRAM_NONROM(.text* .rodata*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .bth_text_sram : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        BTH_SRAM_NONROM(.text* .rodata*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .patch_on_sram : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        KEEP(*(.patch.text.on.sram .patch.rodata.on.sram))
        . = ALIGN(4);
        *(.text.__riscv_*)
        . = ALIGN(4);
        __sram_text_end__ = .;
        CHECK_ALIGN_4(__sram_text_end__);
    } > HILINK_SRAM AT > HILINK_PROGRAM
    __sram_text_size__ = __sram_text_end__ - __sram_text_begin__;
}

/* flash */
SECTIONS
{
    /* cali code */
    .wifi_text_cali : ALIGN(8) {
        ADD_ROM_VERIFY_OFFSET
        __text_begin__ = .;
        FILL(0xFF)
        WIFI_CALI_NONROM(.text* .rodata*)
    } > HILINK_PROGRAM

    .btc_text_cali : ALIGN(8) {
        FILL(0xFF)
        BTC_CALI_NONROM(.text* .rodata*)
    } > HILINK_PROGRAM

    .bth_text_cali : ALIGN(8) {
        FILL(0xFF)
        BTH_CALI_NONROM(.text* .rodata*)
    } > HILINK_PROGRAM

    /* other flash code */
    .plat_text_flash : ALIGN(8) {
        FILL(0xFF)
        PLAT_NONROM(*.text* *.rodata*)
    } > HILINK_PROGRAM

    .wifi_text_flash : ALIGN(8) {
        FILL(0xFF)
        WIFI_FLASH_SECTION()
        WIFI_FLASH_NONROM(.text* .rodata*)
        LWIP_FLASH_SECTION()
        WIFI_NONROM(.text* .rodata*)
    } > HILINK_PROGRAM

    .patch_on_flash : ALIGN(8) {
        FILL(0xFF)
        KEEP(*(.patch.text.on.flash .patch.rodata.on.flash))
    } > HILINK_PROGRAM

    .btc_text_flash : ALIGN(8) {
        FILL(0xFF)
        BTC_NONROM(.text* .rodata*)
    } > HILINK_PROGRAM

    .bth_text_flash : ALIGN(8) {
        FILL(0xFF)
        BTH_NONROM(.text* .rodata*)
    } > HILINK_PROGRAM

    .radar_text_flash : ALIGN(8) {
        FILL(0xFF)
        RADAR_NONROM(.text* .rodata*)
    } > HILINK_PROGRAM

#ifdef CONFIG_MEMORY_CUSTOMIZE_SEC
    .DeviceInit : ALIGN(8) {
        . = ALIGN(8);
        __device_init_start__ = .;
        KEEP(*(SORT(DeviceInit*)))
        __device_init_end__ = .;
    } > HILINK_PROGRAM
    __device_init_size__ = __device_init_end__ - __device_init_start__;

    .ShellCmdArray : ALIGN(8) {
        . = ALIGN(8);
        __shell_cmd_array_start__ = .;
        KEEP(*(ShellCmdArray))
        __shell_cmd_array_end__ = .;
    } > HILINK_PROGRAM
    __shell_cmd_array_size__ = __shell_cmd_array_end__ - __shell_cmd_array_start__;
#endif

    /* other code, should not exist */
    .text : ALIGN(8) {
        FILL(0xFF)
        *(.text)
        *(.text*)
        *(.itcm.text)
        *(.rodata)
        *(.rodata*)
        *(.srodata)
        *(.srodata*)
        KEEP (*(.flashtext))
        KEEP (*(.flashtext*))
        . = ALIGN(4);
        __text_end__ = .;
    } > HILINK_PROGRAM

    /* sram data */
    .plat_data_sram : ALIGN(8) {
        FILL(0xFF)
        __data_load__ = LOADADDR(.plat_data_sram);
        __data_begin__ = .;
        PLAT_SRAM_NONROM(.data*)
        CHECK_ALIGN_4(__data_load__);
        CHECK_ALIGN_4(__data_begin__);
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .wifi_data_sram : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        WIFI_SRAM_NONROM(.data*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .btc_data_sram : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        BTC_SRAM_NONROM(.data*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .bth_data_sram : ALIGN(8) {
        FILL(0xFF)
        . = ALIGN(8);
        BTH_SRAM_NONROM(.data*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    /* cali data */
    .wifi_data_cali : ALIGN(8) {
        FILL(0xFF)
        WIFI_CALI_NONROM(.data*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .btc_data_cali : ALIGN(8) {
        FILL(0xFF)
        BTC_CALI_NONROM(.data*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .bth_data_cali : ALIGN(8) {
        FILL(0xFF)
        BTH_CALI_NONROM(.data*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    /* other flash data */
    .plat_data_flash : ALIGN(8) {
        FILL(0xFF)
        PLAT_NONROM(.data*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .wifi_data_flash : ALIGN(8) {
        FILL(0xFF)
        WIFI_NONROM(.data*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .radar_data_flash : ALIGN(8) {
        FILL(0xFF)
        RADAR_NONROM(.data*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .btc_data_flash : ALIGN(8) {
        FILL(0xFF)
        BTC_NONROM(.data*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .bth_data_flash : ALIGN(8) {
        FILL(0xFF)
        BTH_NONROM(.data*)
    } > HILINK_SRAM AT > HILINK_PROGRAM

    .data : ALIGN(8) {
        FILL(0xFF)
        *(.data)
        *(.data*)
        *(.got)
        *(.got*)
        *(.igot)
        *(.igot*)
        _gp_ = . + 0x800;
        *(.sdata)
        *(.sdata*)
        . = ALIGN(4);
        __data_end__ = .;
        CHECK_ALIGN_4(__data_end__);
    } > HILINK_SRAM AT > HILINK_PROGRAM
    __data_size__ = __data_end__ - __data_begin__;

    /* sram bss */
    .plat_bss_sram (NOLOAD) : ALIGN(8) {
        __bss_begin__ = .;
        PLAT_SRAM_NONROM(.bss*)
        CHECK_ALIGN_4(__bss_begin__);
    } > HILINK_SRAM

    .wifi_bss_sram (NOLOAD) : ALIGN(8) {
        WIFI_SRAM_NONROM(.bss*)
    } > HILINK_SRAM

    .btc_bss_sram (NOLOAD) : ALIGN(8) {
        BTC_SRAM_NONROM(.bss*)
    } > HILINK_SRAM

    .bth_bss_sram (NOLOAD) : ALIGN(8) {
        BTH_SRAM_NONROM(.bss*)
    } > HILINK_SRAM

    .wifi_bss_cali (NOLOAD) : ALIGN(8) {
        WIFI_CALI_NONROM(.bss*)
    } > HILINK_SRAM

    .btc_bss_cali (NOLOAD) : ALIGN(8) {
        BTC_CALI_NONROM(.bss*)
    } > HILINK_SRAM

    .bth_bss_cali (NOLOAD) : ALIGN(8) {
        BTH_CALI_NONROM(.bss*)
    } > HILINK_SRAM

    .plat_bss_flash (NOLOAD) : ALIGN(8) {
        PLAT_NONROM(.bss*)
    } > HILINK_SRAM

    .wifi_bss_flash (NOLOAD) : ALIGN(8) {
        WIFI_NONROM(.bss*)
    } > HILINK_SRAM

    .radar_bss_flash (NOLOAD) : ALIGN(8) {
        RADAR_NONROM(.bss*)
    } > HILINK_SRAM

    .btc_bss_flash (NOLOAD) : ALIGN(8) {
        BTC_NONROM(.bss*)
    } > HILINK_SRAM

    .bth_bss_flash (NOLOAD) : ALIGN(8) {
        BTH_NONROM(.bss*)
    } > HILINK_SRAM

    .bss  (NOLOAD) : ALIGN(8) {
        . = ALIGN(16);
        PROVIDE (__int_stack_start = .);
        *(.int_stack);
        . = ALIGN(16);
        PROVIDE (__int_stack_end = .);
        . = ALIGN(8);
        *(.bss)
        *(.bss*)
        *(.sbss)
        *(.sbss*)
        *(COMMON)
        . = ALIGN(4);
        __bss_end__ = . ;
        CHECK_ALIGN_4(__bss_end__);
    } > HILINK_SRAM
    __bss_size__ = __bss_end__ - __bss_begin__;

#ifdef CONFIG_MEMORY_CUSTOMIZE_RSV
    .user_reserved  (NOLOAD) : ALIGN(8) {
        __mem_rsv_load__ = LOADADDR(.user_reserved);
        __mem_rsv_begin__ = .;
        . += 0x100;
        __mem_rsv_end__ = . ;
    } > HILINK_SRAM AT > PROGRAM_MEM_RSV
    __mem_rsv_size__ = __mem_rsv_end__ - __mem_rsv_begin__;
#endif
}

g_ram_begin = ORIGIN(HILINK_SRAM);
g_ram_size = LENGTH(HILINK_SRAM);

SECTIONS {
    /* Like Uninitialised data, but we don't want to 0 it. Stores backtrace among other things. */
    .preserve (NOLOAD): ALIGN(8) {
        . = ALIGN(8);
        KEEP(*(preserve))
    } > PRESERVE_SHARE_MEM

    .stacks (NOLOAD): ALIGN(16) {
        . = ALIGN(16);
        g_system_stack_begin = .;
        . += APP_IRQ_STACK_LEN;
        . = ALIGN(16);
        __irq_stack_top = .;
        . += APP_EXCP_STACK_LEN;
        . = ALIGN(16);
        __exc_stack_top = .;
        . += APP_NMI_STACK_LEN;
        . = ALIGN(16);
        __nmi_stack_top = .;
        g_system_stack_end = .;
    } > HILINK_SRAM
    g_system_stack_size = g_system_stack_end - g_system_stack_begin;
    g_stack_system = g_system_stack_size;

    /* The internal heap uses whatever RAM space remains
     * and so must be the last section for SRAM in the linker script.
     */
    .heap (NOLOAD): {
        . = ALIGN(8);
        __heap_start = .;
        g_intheap_begin = ABSOLUTE(.);
        g_intheap_size = (ORIGIN(HILINK_SRAM) + LENGTH(HILINK_SRAM)) - g_intheap_begin;
    } > HILINK_SRAM
}
