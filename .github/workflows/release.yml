name: Tag-based Release

on:
  push:
    tags:
      - 'v*' # 匹配以 "v" 开头的标签，例如 v1.0.0

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ hashFiles('src/config.sh', '.devcontainer/Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build development environment image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: .devcontainer/Dockerfile
        tags: ws63-build-env:latest
        load: true
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Project
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspaces/$(basename ${{ github.workspace }}) \
          -w /workspaces/$(basename ${{ github.workspace }})/src \
          --user root \
          ws63-build-env:latest \
          bash -c "
            # 修复权限问题
            chown -R vscode:vscode /workspaces/$(basename ${{ github.workspace }})
            # 切换到vscode用户并执行构建
            su -c 'cd /workspaces/$(basename ${{ github.workspace }})/src && ./config.sh && source ./activate_env.sh && python build.py -c -ninja ws63-liteos-app'
          "

    - name: Create GitHub Release
      id: create-release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          This release was automatically generated from tag ${{ github.ref_name }}.
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') }}

    - name: Prepare Compiled Artifact
      run: |
        zip -r compiled-artifact.zip src/output/ws63/fwpkg
    
    - name: Upload Compiled Artifact
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: compiled-artifact.zip
        asset_name: compiled-artifact.zip
        asset_content_type: application/zip